{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/object.ts","webpack:///./src/component/base.ts","webpack:///./src/index.ts","webpack:///./src/app/index.ts","webpack:///./src/app/annotations.ts","webpack:///./src/app/app.ts","webpack:///./src/component/index.ts","webpack:///./src/component/decorators.ts","webpack:///./src/component/component.ts","webpack:///./src/page/index.ts","webpack:///./src/page/decorators.ts","webpack:///./src/page/page.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","keysOf","filter","result","push","selectObject","obj","items","Array","isArray","length","reduce","Base","__export","annotations_1","app","app_1","BaseApp","object_1","constructor","instance","App","decorators_1","component","method","observer","component_1","BaseComponent","target","descriptor","methods","fields","observers","bindItemsSymbol","options","bindItems","created_1","created","_this","this","forEach","assign","Component","_super","__extends","page","page_1","BasePage","Page"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","\ndeclare type Predicate<T> = (val: T) => boolean;\n\n/**\n * 遍历对象成员，获取对象符合条件的成员名称\n * @param object 要遍历的对象\n * @param filter 筛选条件\n */\nexport function keysOf<T = any>(object: T, filter?: Predicate<string>): string[] {\n    if (!object) { return []; }\n    const result = [];\n    for (const key in object) {\n        if (typeof filter === \"function\") {\n            if (filter(key)) {\n                result.push(key);\n            }\n        } else {\n            result.push(key);\n        }\n    }\n    return result;\n}\n\n/**\n * 根据条件从一个对象中选择部分属性组成一个新的对象\n * @param obj 要投影的对象\n * @param filter 要过滤的条件，可以是函数或者是包含键名的字符串数组\n */\nexport function selectObject<T extends Record<string, any> = any\n>(obj: T, filter: string[] | Predicate<string>): Partial<T> {\n    if (!obj) { return obj; }\n    if (typeof filter === \"function\") {\n        const items = keysOf(obj, filter);\n        return selectObject(obj, items);\n    } else if (Array.isArray(filter) && filter.length) {\n        return filter.reduce((result: any, key: string) => {\n            if (key in obj) {\n                result[key] = obj[key];\n            }\n            return result;\n        }, {});\n    } else {\n        return obj;\n    }\n}\n","/**\n * 组件基础类型，可以被页面和组件共用\n * Component data, including internal data and property values\n */\nexport abstract class Base<D> implements Record<string, any> {\n  /**\n   * 创建一个 SelectorQuery 对象，选择器选取范围为这个组件实例内\n   */\n  public createSelectorQuery: () => any;\n  /**\n   * 创建一个 IntersectionObserver 对象，选择器选取范围为这个组件实例内\n   */\n  public createIntersectionObserver: () => any;\n  /**\n   * 组件数据，包括内部数据和属性值\n   */\n  public data: D;\n  /**\n   * 组件的文件路径\n   */\n  public is: string;\n  /**\n   * 节点id\n   */\n  public id: string;\n  /**\n   * 节点dataset\n   */\n  public dataset: string;\n  /**\n   * 获取这个关系所对应的所有关联节点，参见 组件间关系\n   */\n  public getRelationNodes: (relationKey: string) => any;\n  /**\n   * 立刻执行 callback ，其中的多个 setData 之间不会触发界面绘制（只有某些特殊场景中需要，如用于在不同组件同时 setData 时进行界面绘制同步）\n   */\n  public groupSetData: (callback: () => void) => void;\n  /**\n   * 检查组件是否具有 behavior （检查时会递归检查被直接或间接引入的所有behavior）\n   */\n  public hasBehavior: (behavior: any) => boolean;\n  /**\n   * 使用选择器选择组件实例节点，返回匹配到的全部组件实例对象组成的数组\n   */\n  public selectAllComponents: (selector: string) => any[];\n  /**\n   * 使用选择器选择组件实例节点，返回匹配到的第一个组件实例对象（会被 wx://component-export 影响）\n   */\n  public selectComponent: (selector: string) => any;\n  /**\n   * 设置data并执行视图层渲染\n   * @param data 这次要改变的数据\n   * @param callback setData引起的界面更新渲染完毕后的回调函数\n   */\n  public setData: <K extends keyof D>(data: D | Pick<D, K> | Record<string, any>, callback?: () => void) => void;\n  /**\n   * 触发事件，参见 组件事件\n   */\n  public triggerEvent: (name: string, detail?: object, options?: object) => void;\n}\n","export * from \"./app/index\";\nexport * from \"./component/index\";\nexport * from \"./page/index\";\n","export { app } from \"./annotations\";\nexport { BaseApp } from \"./app\";\n","import { selectObject } from \"../utils/object\";\nimport { BaseApp } from \"./app\";\n\ndeclare function App(options: any): void;\n\nexport function app(constructor: new (...args: any[]) => BaseApp) {\n    const instance = new constructor();\n    const result = selectObject(instance, (key) => key !== \"constructor\");\n    App(result);\n}\n","import { ILaunchShowOption, IPageNotFoundOption } from \"./app.type\";\r\n\r\nexport abstract class BaseApp implements Record<string, any> {\r\n    /** 生命周期回调—监听小程序初始化\r\n     *\r\n     * 小程序初始化完成时触发，全局只触发一次。\r\n     */\r\n    public onLaunch?(options?: ILaunchShowOption): void;\r\n    /** 生命周期回调—监听小程序显示\r\n     *\r\n     * 小程序启动，或从后台进入前台显示时\r\n     */\r\n    public onShow?(options?: ILaunchShowOption): void;\r\n    /** 生命周期回调—监听小程序隐藏\r\n     *\r\n     * 小程序从前台进入后台时\r\n     */\r\n    public onHide?(): void;\r\n    /** 错误监听函数\r\n     *\r\n     * 小程序发生脚本错误，或者 api\r\n     */\r\n    public onError?(/** 错误信息，包含堆栈 */error?: string): void;\r\n    /** 页面不存在监听函数\r\n     *\r\n     * 小程序要打开的页面不存在时触发，会带上页面信息回调该函数\r\n     *\r\n     * **注意：**\r\n     * 1. 如果开发者没有添加 `onPageNotFound` 监听，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。\r\n     * 2. 如果 `onPageNotFound` 回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再回调 `onPageNotFound`。\r\n     *\r\n     * 最低基础库： 1.9.90\r\n     */\r\n    public onPageNotFound?(options?: IPageNotFoundOption): void;\r\n}\r\n","export { bind, component, method, observer } from \"./decorators\";\nexport { BaseComponent } from \"./component\";\nexport { IComponentOptions } from \"./component.options.interface\";\nexport { IProperty } from \"./property.interface\";\n","import { selectObject } from \"../utils/object\";\nimport { IComponentOptions } from \"./component.options.interface\";\n\ndeclare function Component(options: any): void;\n\n/**\n * 将当前成员标记为组件的方法\n */\nexport function method(target: any, name: string, descriptor: PropertyDescriptor) {\n  target.methods = target.methods || {};\n  target.methods[name] = descriptor.value;\n}\n\n/**\n * 组件数据字段监听器，用于监听 properties 和 data 的变化。\n * 从小程序基础库版本 2.6.1 开始支持。\n * @param fields 要监听字段，比如 'some.subfiel',仅使用通配符'**'可以监听全部。\n */\nexport function observer(fields: string) {\n  return function(target: any, name: string, descriptor: PropertyDescriptor) {\n    target.observers = target.observers || {};\n    target.observers[fields] = descriptor.value;\n  };\n}\n\nconst bindItemsSymbol = Symbol(\"bind item to component\");\n\n/**\n * 组件装饰器\n * @param options 组件装饰器参数\n */\nexport function component<T = any>(options?: IComponentOptions<T>) {\n  return function(constructor: new (...args: any[]) => any) {\n    const instance: any = new constructor();\n    const bindItems = constructor.prototype[bindItemsSymbol];\n    if (Array.isArray(bindItems)) {\n      const { created } = instance;\n      instance.created = function() {\n        bindItems.forEach((key) => this[key] = instance[key]);\n        if (typeof created === \"function\") { created.call(this); }\n      };\n    }\n    const methods = (instance as any).methods || {};\n    const result = selectObject(instance, (key) => key !== \"constructor\" && !(key in methods));\n    Object.assign(result, options);\n    Component(result);\n  };\n}\n\n/**\n * 为组件绑定自定义数据\n */\nexport function bind(target: any, name: string) {\n  target[bindItemsSymbol] = target[bindItemsSymbol] || [];\n  target[bindItemsSymbol].push(name);\n}\n","import { Base } from \"./base\";\n/**\n * 组件基础类型，包含组件所有可用的属性和方法\n */\nexport abstract class BaseComponent<D = any> extends Base<D> implements Record<string, any> {\n  /**\n   * 类似于mixins和traits的组件间代码复用机制，参见 behaviors\n   */\n  public behaviors?: string[];\n  /**\n   * 组件间关系定义，参见 组件间关系\n   */\n  public relations?: object;\n  /**\n   * 组件接受的外部样式类，参见 外部样式类\n   */\n  public externalClasses?: string[];\n  /**\n   * 一些选项（文档中介绍相关特性时会涉及具体的选项设置，这里暂不列举）\n   */\n  public options?: object;\n  /**\n   * 组件生命周期声明对象，参见 组件生命周期\n   */\n  public lifetimes?: object;\n  /**\n   * 组件所在页面的生命周期声明对象，支持页面的 show 、 hide 等生命周期，参见 组件生命周期\n   */\n  public pageLifetimes?: object;\n  /**\n   * 定义段过滤器，用于自定义组件扩展，参见 自定义组件扩展\n   */\n  public definitionFilter?: () => void;\n  /**\n   * 组件生命周期函数，在组件实例刚刚被创建时执行，注意此时不能调用 setData ，参见 组件生命周期\n   */\n  public created?(): void;\n  /**\n   * 组件生命周期函数，在组件实例进入页面节点树时执行，参见 组件生命周期\n   */\n  public attached?(): void;\n  /**\n   * 组件生命周期函数，在组件布局完成后执行，参见 组件生命周期\n   */\n  public ready?(): void;\n  /**\n   * 组件生命周期函数，在组件实例被移动到节点树另一个位置时执行，参见 组件生命周期\n   */\n  public moved?(): void;\n  /**\n   * 组件生命周期函数，在组件实例被从页面节点树移除时执行，参见 组件生命周期\n   */\n  public detached?(): void;\n}\n","export { page } from \"./decorators\";\nexport { BasePage } from \"./page\";\n","import { selectObject } from \"../utils/object\";\n\ndeclare function Page(options: any): void;\n\n/**\n * 页面装饰器\n */\nexport function page(constructor: new (...args: any[]) => any) {\n  const instance = new constructor();\n  const result = selectObject(instance, (key) => key !== \"constructor\");\n  Page(result);\n}\n","import { Base } from \"../component/base\";\r\nimport { ICustomShareContent, IPageScrollOption, IShareAppMessageOption, ITabItemTapOption } from \"./page.type\";\r\n\r\n/**\r\n * 页面基础类型，包含所有的属性和方法\r\n * The base type of page which including all properties and methods\r\n */\r\nexport abstract class BasePage<D = any> extends Base<D> implements Record<string, any> {\r\n  /**\r\n   * 当前页面的页面参数\r\n   */\r\n  public options: Record<string, string>;\r\n  /**\r\n   * 当前页面的路径\r\n   * The path to the current page\r\n   */\r\n  public route: string;\r\n  /**\r\n   * 生命周期回调—监听页面加载\r\n   */\r\n  public onLoad?(query: Record<string, string>): void;\r\n  /**\r\n   * 生命周期回调—监听页面显示\r\n   */\r\n  public onShow?(): void;\r\n  /**\r\n   * 生命周期回调—监听页面初次渲染完成\r\n   */\r\n  public onReady?(): void;\r\n  /**\r\n   * 生命周期回调—监听页面隐藏\r\n   */\r\n  public onHide?(): void;\r\n  /**\r\n   * 生命周期回调—监听页面卸载\r\n   */\r\n  public onUnload?(): void;\r\n  /**\r\n   * 监听用户下拉动作\r\n   */\r\n  public onPullDownRefresh?(): void;\r\n  /**\r\n   * 页面上拉触底事件的处理函数\r\n   */\r\n  public onReachBottom?(): void;\r\n  /**\r\n   * 用户点击右上角转发\r\n   */\r\n  public onShareAppMessage?(options?: IShareAppMessageOption): ICustomShareContent;\r\n  /**\r\n   * 页面滚动触发事件的处理函数\r\n   */\r\n  public onPageScroll?(options?: IPageScrollOption): void;\r\n  /**\r\n   * 当前是 tab 页时，点击 tab 时触发\r\n   */\r\n  public onTabItemTap?(options?: ITabItemTapOption): void;\r\n}\r\n"],"sourceRoot":""}