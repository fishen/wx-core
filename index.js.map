{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/object.ts","webpack:///./src/utils/array.ts","webpack:///./src/common.ts","webpack:///./src/constants.ts","webpack:///./src/component/base.ts","webpack:///./src/index.ts","webpack:///./src/app/index.ts","webpack:///./src/app/decorators.ts","webpack:///./src/app/app.ts","webpack:///./src/component/index.ts","webpack:///./src/component/decorators.ts","webpack:///./src/component/component.ts","webpack:///./src/page/index.ts","webpack:///./src/page/decorators.ts","webpack:///./src/page/page.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","keysOf","filter","result","push","selectObject","obj","items","Array","isArray","reduce","arr","item","indexOf","getUpdateData","computedProperties","this","data","methods","instance","options","props","properties","keys","includes","String","Number","Boolean","type","length","observer","apply","args","dependentUpdates","setData","assign","updates","callback","target","symbol","keyFormatter","Reflect","getMetadataKeys","itemName","description","slice","COMPUTED_DATA","BINDS","METHODS","OBSERVERS","LIFETIMES","PAGE_LIFETIMES","HOOK_FUNC","Base","app","App","constructor","aobj","ctor","console","warn","component","method","computed","pageLifetime","lifetime","Component","bindProperties","setProperties","computes","initailComputedData","observers","getMetadata","binds","lifetimes","forEach","created","overrideSetData","defineMetadata","pageLifetimes","cobj","hook","descriptor","fields","registerHook","fn","page","Page","onLoad","pobj"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","\ndeclare type Predicate<T> = (val: T) => boolean;\n\n/**\n * 遍历对象成员，获取对象符合条件的成员名称\n * @param object 要遍历的对象\n * @param filter 筛选条件\n */\nexport function keysOf<T = any>(object: T, filter?: Predicate<string>): string[] {\n    if (!object) { return []; }\n    const result = [];\n    for (const key in object) {\n        if (typeof filter === \"function\") {\n            if (filter(key)) {\n                result.push(key);\n            }\n        } else {\n            result.push(key);\n        }\n    }\n    return result;\n}\n\n/**\n * 根据条件从一个对象中选择部分属性组成一个新的对象\n * @param obj 要投影的对象\n * @param filter 要过滤的条件，可以是函数或者是包含键名的字符串数组\n */\nexport function selectObject<T extends Record<string, any> = any\n>(obj: T, filter: string[] | Predicate<string>): Partial<T> {\n    if (!obj) { return obj; }\n    if (typeof filter === \"function\") {\n        const items = keysOf(obj, filter);\n        return selectObject(obj, items);\n    } else if (Array.isArray(filter)) {\n        return filter.reduce((result: any, key: string) => {\n            if (key in obj) {\n                result[key] = obj[key];\n            }\n            return result;\n        }, {});\n    } else {\n        return obj;\n    }\n}\n","export function includes<T>(arr: T[], item: T) {\r\n    return Array.isArray(arr) && arr.indexOf(item) >= 0;\r\n}\r\n","import { includes } from \"./utils/array\";\r\n\r\n/**\r\n * 获取更新的属性\r\n * @param computedProperties 需要计算的属性\r\n */\r\nexport function getUpdateData(computedProperties: string[]) {\r\n    if (!Array.isArray(computedProperties)) { return {}; }\r\n    this.data = this.data || {};\r\n    const updates = computedProperties.reduce((result, key) => {\r\n        const method = this[`_computed_${key}_`] || this.methods[`_computed_${key}_`];\r\n        const value = method.call(this);\r\n        if (value !== this.data[key]) {\r\n            result[key] = value;\r\n        }\r\n        return result;\r\n    }, {} as any);\r\n    return updates;\r\n}\r\n\r\n/**\r\n * 初始化数据，将计算属性和Data合并\r\n * @param instance 页面或者组件实例\r\n * @param computedProperties 需要计算的属性\r\n * @param options 组件属性\r\n */\r\nexport function initailComputedData(instance: any, computedProperties: string[], options?: Record<string, any>) {\r\n    instance.data = instance.data || {};\r\n    const props: Record<string, any> = {};\r\n    if (options && options.properties && Array.isArray(computedProperties)) {\r\n        options.properties = Object.keys(options.properties).reduce((result, key) => {\r\n            const property: any = options.properties[key];\r\n            result[key] = property;\r\n            if (includes([String, Number, Boolean, Array, Object, null], property)) {\r\n                result[key] = { type: property };\r\n            }\r\n            if (typeof result[key] !== \"object\") { return result; }\r\n            if (computedProperties.length) {\r\n                const { observer, value } = result[key];\r\n                props[key] = value;\r\n                result[key].observer = function(...args: any[]) {\r\n                    if (typeof observer === \"function\") {\r\n                        observer.apply(this, args);\r\n                    }\r\n                    const dependentUpdates = getUpdateData.call(this, computedProperties);\r\n                    this.setData(dependentUpdates);\r\n                };\r\n            }\r\n            return result;\r\n        }, {} as any);\r\n    }\r\n    Object.assign(instance.data, props);\r\n    const updates = getUpdateData.call(instance, computedProperties);\r\n    Object.assign(instance.data, updates);\r\n}\r\n\r\n/**\r\n * 重写setData方法\r\n * @param computedProperties 需要计算的属性\r\n */\r\nexport function overrideSetData(computedProperties: string[]) {\r\n    if (Array.isArray(computedProperties)) {\r\n        const originalSetData = this.setData;\r\n        this.setData = function(data: any, callback: any) {\r\n            originalSetData.call(this, data, callback);\r\n            const updates = getUpdateData.call(this, computedProperties);\r\n            if (updates && Object.keys(updates).length) {\r\n                originalSetData.call(this, updates);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * 为指定实例对像设置属性\r\n * @param instance\r\n * @param target\r\n */\r\nexport function setProperties(instance: any, target: any) {\r\n    return function(symbol: symbol, keyFormatter?: (key: string) => string): string[] {\r\n        const items = Reflect.getMetadataKeys(target, symbol);\r\n        if (items.length) {\r\n            const itemName = (symbol as any).description || String(symbol).slice(7, -1);\r\n            instance[itemName] = items.reduce((result, key) => {\r\n                const actualKey = keyFormatter ? keyFormatter(key) : key;\r\n                result[actualKey] = instance[key];\r\n                return result;\r\n            }, instance[itemName] || {} as any);\r\n        }\r\n        return items;\r\n    };\r\n}\r\n","export const COMPUTED_DATA = Symbol(\"properties\");\r\nexport const BINDS = Symbol(\"BindItems\");\r\nexport const METHODS = Symbol(\"methods\");\r\nexport const OBSERVERS = Symbol(\"observers\");\r\nexport const LIFETIMES = Symbol(\"lifetimes\");\r\nexport const PAGE_LIFETIMES = Symbol(\"pageLifetimes\");\r\nexport const HOOK_FUNC = Symbol(\"HookFunction\");\r\n","/**\n * 组件基础类型，可以被页面和组件共用\n * Component data, including internal data and property values\n */\nexport abstract class Base<D> implements Record<string, any> {\n  /**\n   * 创建一个 SelectorQuery 对象，选择器选取范围为这个组件实例内\n   */\n  public createSelectorQuery: () => any;\n  /**\n   * 创建一个 IntersectionObserver 对象，选择器选取范围为这个组件实例内\n   */\n  public createIntersectionObserver: () => any;\n  /**\n   * 组件数据，包括内部数据和属性值\n   */\n  public data: D;\n  /**\n   * 组件的文件路径\n   */\n  public is: string;\n  /**\n   * 节点id\n   */\n  public id: string;\n  /**\n   * 节点dataset\n   */\n  public dataset: string;\n  /**\n   * 获取这个关系所对应的所有关联节点，参见 组件间关系\n   */\n  public getRelationNodes: (relationKey: string) => any;\n  /**\n   * 返回当前页面的 custom-tab-bar 的组件实例\n   */\n  public getTabBar: () => any;\n  /**\n   * 立刻执行 callback ，其中的多个 setData 之间不会触发界面绘制（只有某些特殊场景中需要，如用于在不同组件同时 setData 时进行界面绘制同步）\n   */\n  public groupSetData: (callback: () => void) => void;\n  /**\n   * 检查组件是否具有 behavior （检查时会递归检查被直接或间接引入的所有behavior）\n   */\n  public hasBehavior: (behavior: any) => boolean;\n  /**\n   * 使用选择器选择组件实例节点，返回匹配到的全部组件实例对象组成的数组\n   */\n  public selectAllComponents: (selector: string) => any[];\n  /**\n   * 使用选择器选择组件实例节点，返回匹配到的第一个组件实例对象（会被 wx://component-export 影响）\n   */\n  public selectComponent: (selector: string) => any;\n  /**\n   * 设置data并执行视图层渲染\n   * @param data 这次要改变的数据\n   * @param callback setData引起的界面更新渲染完毕后的回调函数\n   */\n  public setData: <K extends keyof D>(data: D | Pick<D, K> | Record<string, any>, callback?: () => void) => void;\n  /**\n   * 触发事件，参见 组件事件\n   */\n  public triggerEvent: (name: string, detail?: object, options?: object) => void;\n}\n","export * from \"./app/index\";\nexport * from \"./component/index\";\nexport * from \"./page/index\";\n","export { app } from \"./decorators\";\nexport { App } from \"./app\";\n","import { selectObject } from \"../utils/object\";\nimport { IAppOptions } from \"./app.options\";\n\nexport function app(options?: IAppOptions) {\n    options = options || {};\n    return function(constructor: new (...args: any[]) => any) {\n        const instance = new constructor();\n        let aobj = selectObject(instance, (key) => key !== \"constructor\");\n        if (typeof options.ctor === \"function\") {\n            aobj = options.ctor(aobj);\n            if (typeof aobj !== \"object\") {\n              console.warn(\"Custom app's ctor must return a valid object.\");\n            }\n          }\n        typeof App === \"function\" && App(aobj);\n    };\n}\n","import { ILaunchShowOption, IPageNotFoundOption } from \"./app.type\";\r\n\r\nexport abstract class App implements Record<string, any> {\r\n    /** 生命周期回调—监听小程序初始化\r\n     *\r\n     * 小程序初始化完成时触发，全局只触发一次。\r\n     */\r\n    public onLaunch?(options?: ILaunchShowOption): void;\r\n    /** 生命周期回调—监听小程序显示\r\n     *\r\n     * 小程序启动，或从后台进入前台显示时\r\n     */\r\n    public onShow?(options?: ILaunchShowOption): void;\r\n    /** 生命周期回调—监听小程序隐藏\r\n     *\r\n     * 小程序从前台进入后台时\r\n     */\r\n    public onHide?(): void;\r\n    /** 错误监听函数\r\n     *\r\n     * 小程序发生脚本错误，或者 api\r\n     */\r\n    public onError?(/** 错误信息，包含堆栈 */error?: string): void;\r\n    /** 页面不存在监听函数\r\n     *\r\n     * 小程序要打开的页面不存在时触发，会带上页面信息回调该函数\r\n     *\r\n     * **注意：**\r\n     * 1. 如果开发者没有添加 `onPageNotFound` 监听，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。\r\n     * 2. 如果 `onPageNotFound` 回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再回调 `onPageNotFound`。\r\n     *\r\n     * 最低基础库： 1.9.90\r\n     */\r\n    public onPageNotFound?(options?: IPageNotFoundOption): void;\r\n}\r\n","export { bind, component, method, observer, computed, pageLifetime, lifetime } from \"./decorators\";\nexport { Component } from \"./component\";\nexport { IComponentOptions } from \"./component.options\";\nexport { IProperty } from \"./property\";\n","import { initailComputedData, overrideSetData, setProperties } from \"../common\";\nimport { BINDS, COMPUTED_DATA, HOOK_FUNC, LIFETIMES, METHODS, OBSERVERS, PAGE_LIFETIMES } from \"../constants\";\nimport { includes } from \"../utils/array\";\nimport { selectObject } from \"../utils/object\";\nimport { IComponentOptions } from \"./component.options\";\n\n/**\n * 将当前成员标记为组件的方法\n */\nexport function method(target: any, name: string, descriptor: PropertyDescriptor) {\n  if (descriptor && typeof descriptor.value === \"function\") {\n    Reflect.defineMetadata(name, null, target, METHODS);\n  } else {\n    console.warn(`The method decorator can only be used in function members.`);\n  }\n}\n\n/**\n * 组件数据字段监听器，用于监听 properties 和 data 的变化。\n * 从小程序基础库版本 2.6.1 开始支持。\n * @param fields 要监听字段，比如 'some.subfiel',仅使用通配符'**'可以监听全部。\n */\nexport function observer(fields: string) {\n  return function(target: any, name: string) {\n    Reflect.defineMetadata(name, fields, target, OBSERVERS);\n  };\n}\n\n/**\n * 组件装饰器\n * @param options 组件装饰器参数\n */\nexport function component<T = any>(options?: IComponentOptions<T>) {\n  options = options || {};\n  return function(constructor: new (...args: any[]) => any) {\n    const instance: any = new constructor();\n    Object.assign(instance, options);\n    const target = constructor.prototype;\n    const bindProperties = setProperties(instance, target);\n    // set methods\n    const methods = bindProperties(METHODS);\n    const computes = Reflect.getMetadataKeys(target, COMPUTED_DATA);\n    instance.methods = computes.reduce((result, key) => {\n      result[`_computed_${key}_`] = instance[key];\n      return result;\n    }, instance.methods || {});\n    initailComputedData(instance, computes, options);\n    // set observers\n    const observers = bindProperties(OBSERVERS, (key) => Reflect.getMetadata(key, target, OBSERVERS));\n    const binds = Reflect.getMetadataKeys(target, BINDS);\n    if (binds.length || computes.length) {\n      [instance, instance.lifetimes].forEach((item) => {\n        if (!item) { return; }\n        const { created } = item;\n        item.created = function() {\n          overrideSetData.call(this, computes);\n          binds.forEach((key: string) => this[key] = instance[key]);\n          typeof created === \"function\" && (created.call(this));\n        };\n      });\n      if (Reflect.getMetadataKeys(target, LIFETIMES).length) {\n        Reflect.defineMetadata(\"created\", null, target, LIFETIMES);\n      }\n    }\n    const lifetimes = bindProperties(LIFETIMES);\n    const pageLifetimes = bindProperties(PAGE_LIFETIMES);\n    let cobj = selectObject(instance, (key) => !includes([\"constructor\", \"ctor\"], key)\n      && !includes(computes, key)\n      && !includes(methods, key)\n      && !includes(observers, key)\n      && !includes(lifetimes, key)\n      && !includes(pageLifetimes, key));\n    const hook = (component as any)[HOOK_FUNC];\n    cobj = typeof hook === \"function\" ? hook(cobj) : cobj;\n    cobj = typeof options.ctor === \"function\" ? options.ctor(cobj) : cobj;\n    typeof Component === \"function\" && Component(cobj);\n  };\n}\n\n/**\n * 注册全局组件钩子函数\n */\ncomponent.registerHook = function(fn: (obj: any) => object) {\n  (component as any)[HOOK_FUNC] = fn;\n};\n\n/**\n * 为组件绑定自定义数据\n */\nexport function bind(target: any, name: string) {\n  Reflect.defineMetadata(name, null, target, BINDS);\n}\n\n/**\n * 添加计算属性\n */\nexport function computed() {\n  return function(target: any, name: string, descriptor: PropertyDescriptor) {\n    Reflect.defineMetadata(name, null, target, COMPUTED_DATA);\n  };\n}\n\n/**\n * 声明组件生命周期函数\n */\nexport function lifetime(target: any, name: string, descriptor: PropertyDescriptor) {\n  Reflect.defineMetadata(name, null, target, LIFETIMES);\n}\n\n/**\n * 声明组件所在页面的生命周期函数\n */\nexport function pageLifetime(target: any, name: string, descriptor: PropertyDescriptor) {\n  Reflect.defineMetadata(name, null, target, PAGE_LIFETIMES);\n}\n","import { Base } from \"./base\";\n/**\n * 组件基础类型，包含组件所有可用的属性和方法\n */\nexport abstract class Component<D = any> extends Base<D> implements Record<string, any> {\n  /**\n   * 类似于mixins和traits的组件间代码复用机制，参见 behaviors\n   */\n  public behaviors?: string[] | string;\n  /**\n   * 组件间关系定义，参见 组件间关系\n   */\n  public relations?: object;\n  /**\n   * 组件接受的外部样式类，参见 外部样式类\n   */\n  public externalClasses?: string[];\n  /**\n   * 一些选项（文档中介绍相关特性时会涉及具体的选项设置，这里暂不列举）\n   */\n  public options?: object;\n  /**\n   * 组件生命周期声明对象，参见 组件生命周期\n   */\n  public lifetimes?: object;\n  /**\n   * 组件所在页面的生命周期声明对象，支持页面的 show 、 hide 等生命周期，参见 组件生命周期\n   */\n  public pageLifetimes?: object;\n  /**\n   * 定义段过滤器，用于自定义组件扩展，参见 自定义组件扩展\n   */\n  public definitionFilter?: (...args: any[]) => void;\n  /**\n   * 组件生命周期函数，在组件实例刚刚被创建时执行，注意此时不能调用 setData ，参见 组件生命周期\n   */\n  public created?(): void;\n  /**\n   * 组件生命周期函数，在组件实例进入页面节点树时执行，参见 组件生命周期\n   */\n  public attached?(): void;\n  /**\n   * 组件生命周期函数，在组件布局完成后执行，参见 组件生命周期\n   */\n  public ready?(): void;\n  /**\n   * 组件生命周期函数，在组件实例被移动到节点树另一个位置时执行，参见 组件生命周期\n   */\n  public moved?(): void;\n  /**\n   * 组件生命周期函数，在组件实例被从页面节点树移除时执行，参见 组件生命周期\n   */\n  public detached?(): void;\n}\n","export { page } from \"./decorators\";\nexport { Page } from \"./page\";\n","import { initailComputedData, overrideSetData } from \"../common\";\nimport { COMPUTED_DATA, HOOK_FUNC } from \"../constants\";\nimport { includes } from \"../utils/array\";\nimport { selectObject } from \"../utils/object\";\nimport { IPageOptions } from \"./page.options\";\n\n/**\n * 页面装饰器\n */\nexport function page(options?: IPageOptions) {\n  options = options || {};\n  return function(constructor: new (...args: any[]) => any) {\n    const instance = new constructor();\n    const target = constructor.prototype;\n    const computes = Reflect.getMetadataKeys(target, COMPUTED_DATA);\n    if (computes.length) {\n      computes.forEach((key) => instance[`_computed_${key}_`] = instance[key]);\n      initailComputedData(instance, computes);\n      const { onLoad } = instance;\n      instance.onLoad = function() {\n        overrideSetData.call(this, computes);\n        typeof onLoad === \"function\" && (onLoad.call(this));\n      };\n    }\n    let pobj = selectObject(instance, (key) => key !== \"constructor\"\n      && !includes(computes, key));\n    const hook = (page as any)[HOOK_FUNC];\n    pobj = typeof hook === \"function\" ? hook(pobj) : pobj;\n    pobj = typeof options.ctor === \"function\" ? options.ctor(pobj) : pobj;\n    typeof Page === \"function\" && Page(pobj);\n  };\n}\n/**\n * 注册全局页面钩子函数\n */\npage.registerHook = function(fn: (obj: any) => object) {\n  (page as any)[HOOK_FUNC] = fn;\n};\n","import { Base } from \"../component/base\";\r\nimport { ICustomShareContent, IPageScrollOption, IShareAppMessageOption, ITabItemTapOption } from \"./page.type\";\r\n\r\n/**\r\n * 页面基础类型，包含所有的属性和方法\r\n * The base type of page which including all properties and methods\r\n */\r\nexport abstract class Page<D = any> extends Base<D> implements Record<string, any> {\r\n  /**\r\n   * 当前页面的页面参数\r\n   */\r\n  public options: Record<string, string>;\r\n  /**\r\n   * 当前页面的路径\r\n   * The path to the current page\r\n   */\r\n  public route: string;\r\n  /**\r\n   * 生命周期回调—监听页面加载\r\n   */\r\n  public onLoad?(query: Record<string, string>): void;\r\n  /**\r\n   * 生命周期回调—监听页面显示\r\n   */\r\n  public onShow?(): void;\r\n  /**\r\n   * 生命周期回调—监听页面初次渲染完成\r\n   */\r\n  public onReady?(): void;\r\n  /**\r\n   * 生命周期回调—监听页面隐藏\r\n   */\r\n  public onHide?(): void;\r\n  /**\r\n   * 生命周期回调—监听页面卸载\r\n   */\r\n  public onUnload?(): void;\r\n  /**\r\n   * 监听用户下拉动作\r\n   */\r\n  public onPullDownRefresh?(): void;\r\n  /**\r\n   * 页面上拉触底事件的处理函数\r\n   */\r\n  public onReachBottom?(): void;\r\n  /**\r\n   * 用户点击右上角转发\r\n   */\r\n  public onShareAppMessage?(options?: IShareAppMessageOption): ICustomShareContent;\r\n  /**\r\n   * 页面滚动触发事件的处理函数\r\n   */\r\n  public onPageScroll?(options?: IPageScrollOption): void;\r\n  /**\r\n   * 当前是 tab 页时，点击 tab 时触发\r\n   */\r\n  public onTabItemTap?(options?: ITabItemTapOption): void;\r\n}\r\n"],"sourceRoot":""}